#!/bin/bash

# Push staged changes with ai-generated commit message
# 
# This script is designed to be run as alias.
#
# Deps: curl, jq

set -euo pipefail

manual_msg="${1-}"

git add -A

if [[ -z "$(git diff --cached --name-only)" ]]; then
  echo "Nothing staged to commit."
  return 0
fi

diff="$(git diff --cached --binary)"
max=40000
if (( ${#diff} > max )); then
  diff="${diff:0:max}\n... <diff truncated>"
fi

commit_msg=""
if [[ -n "$manual_msg" ]]; then
  commit_msg="$manual_msg"
else
  agent="${GIT_AI_AGENT:-openai}"
  anthropic_model="${AI_ANTHROPIC_MODEL:-claude-4-sonnet-latest}"
  openai_model="${AI_OPENAI_MODEL:-gpt-5-mini}"

prompt
prompt=$'You are an expert software engineer. Draft a concise, helpful Git commit message for the staged changes below.\n\nRules:\n- Prefer Conventional Commits (e.g., feat:, fix:, chore:, docs:, refactor:, test:, build:).\n- 1 short subject line (<= 72 chars), then optional body with wrapped bullets.\n- No code fences, no quotes around the subject, no emojis.\n- Be specific (mention files/areas and intent), but don\'t exceed a few lines.\n\nSTAGED DIFF:\n'${diff}

if [[ "$agent" == "claude" ]]; then
    if [[ -n "${ANTHROPIC_API_KEY-}" ]]; then
      resp="$(curl -sS https://api.anthropic.com/v1/messages \
        -H "x-api-key: ${ANTHROPIC_API_KEY}" \
        -H "anthropic-version: 2023-06-01" \
        -H "content-type: application/json" \
        -d "$(jq -n --arg m "$anthropic_model" --arg p "$prompt" \
              '{model:$m, max_tokens: 300, messages:[{role:"user", content:$p}], temperature:0.2}')" )" || true
      commit_msg="$(jq -r '.content[0].text // empty' <<<"$resp" 2>/dev/null || true)"
    fi
elif [[ "$agent" == "openai" ]]; then
    if [[ -n "${OPENAI_API_KEY-}" ]]; then
      resp="$(curl -sS https://api.openai.com/v1/chat/completions \
        -H "authorization: Bearer ${OPENAI_API_KEY}" \
        -H "content-type: application/json" \
        -d "$(jq -n --arg m "$openai_model" --arg p "$prompt" \
              '{model:$m, temperature:0.2, messages:[{role:"system", content:"You write excellent, conventional Git commit messages."},{role:"user", content:$p}], max_tokens:300}')" )" || true
      commit_msg="$(jq -r '.choices[0].message.content // empty' <<<"$resp" 2>/dev/null || true)"
    fi
  fi
fi

if [[ -z "$commit_msg" ]]; then
  commit_msg="chore: update"
fi

commit_msg="$(printf "%s" "$commit_msg" | sed -E '1s/^(```|")//; $s/(```|")$//')"

if git commit -m "$commit_msg"; then
  :
else
  echo "Commit failed. Aborting push."
  return 1
fi

if git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
  git push
else
  branch="$(git rev-parse --abbrev-ref HEAD)"
  git push -u origin "$branch"
fi
