#!/bin/bash

# Push staged changes with ai-generated commit message

# pretty colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
RESET="\033[0m"

set -euo pipefail

if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo -e "${MAGENTA}Not in a git repository.${RESET}"
  exit 1
fi

git add -A

if [[ -z "$(git diff --cached --name-only)" ]]; then
  echo -e "${MAGENTA}Nothing staged to commit.${RESET}"
  exit 0
fi

diff="$(git diff --cached)"
max_chars=50000
if (( ${#diff} > max_chars )); then
  diff="${diff:0:max_chars}
... <diff truncated at ${max_chars} characters>"
fi

prompt="
You are an expert software engineer. 
Draft a concise, helpful Git commit message for the staged changes below.

Rules:
- Prefer Conventional Commits (e.g., feat:, fix:, chore:, docs:, refactor:, test:, build:)
- 1 short subject line (<= 72 chars), then optional body with wrapped bullets
- No code fences, no quotes around the subject, no emojis
- Be specific (mention files/areas and intent), but don't exceed a few lines
- Return ONLY the commit message, nothing else

STAGED DIFF:
${diff}"

if ! command -v claude >/dev/null 2>&1; then
  echo -e "${YELLOW}Claude CLI not found.${RESET}"
  exit 1
fi

claude_msg="$(claude --model claude-sonnet-4-0 -p "$prompt" 2>&1)"
claude_exit=$?

if [[ $claude_exit -ne 0 ]]; then
  echo -e "${RED}Claude Error: ${claude_msg:0:100}${RESET}"
  exit 1
fi

git commit -m "$claude_msg"
if [[ $? -ne 0 ]]; then
  echo -e "${RED}Commit failed.${RESET}"
  exit 1
fi

git push -u origin "$(git rev-parse --abbrev-ref HEAD)"
if [[ $? -ne 0 ]]; then
  echo -e "${RED}Push failed.${RESET}"
  exit 1
fi